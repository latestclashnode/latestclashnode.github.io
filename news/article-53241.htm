<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://latestclashnode.github.io/news/article-53241.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>vue使用Vuex状态管理模式_vue.js_</title>
        <meta name="description" content="目录  1、基于单向数据流问题而产生了Vuex 2、安装及使用 3、核心及使用方法  （1）State （2） Getters （3） Mutation （4） Action （5）Modules  " />
        <link rel="icon" href="/assets/website/img/latestclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="LatestClashNode最新订阅分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://latestclashnode.github.io/news/article-53241.htm" />
    <meta property="og:site_name" content="LatestClashNode最新订阅分享站" />
    <meta property="og:title" content="vue使用Vuex状态管理模式_vue.js_" />
    <meta property="og:image" content="https://latestclashnode.github.io/uploads/20240617/dec2220d0c8f3c8f3a684a68292c3b98.webp" />
        <meta property="og:release_date" content="2025-02-08T04:41:23" />
    <meta property="og:updated_time" content="2025-02-08T04:41:23" />
        <meta property="og:description" content="目录  1、基于单向数据流问题而产生了Vuex 2、安装及使用 3、核心及使用方法  （1）State （2） Getters （3） Mutation （4） Action （5）Modules  " />
        
    <meta name="robots" content="index, follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue使用Vuex状态管理模式_vue.js_">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS
    ============================================ -->
    <!-- Vendor CSS (Bootstrap & Icon Font) -->
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/vendor/font-awesome-pro.min.css">
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/vendor/pe-icon-7-stroke.css">
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/vendor/muli-font.css">
    <!-- Plugins CSS (All Plugins Files) -->
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/plugins/swiper.min.css">
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/plugins/animate.css">
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/plugins/aos.min.css">
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/plugins/magnific-popup.css">
    <!-- Main Style CSS -->
    <link rel="stylesheet" href="/assets/website/css/latestclashnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z5M1KX50FV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z5M1KX50FV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="page" class="section">
        <!-- Header Section Start -->
        <div class="header-section header-transparent sticky-header section">
            <div class="header-inner">
                <div class="container position-relative">
                    <div class="row justify-content-between align-items-center">
                        <!-- Header Logo Start -->
                        <div class="col-xl-6 col-auto">
                            <div class="header-logo">
                                <a href="/">
                                                                <span style="color: #fff;">Latest Clash Node</span>
                                                                </a>
                            </div>
                        </div>
                        <!-- Header Logo End -->
                        <!-- Header Main Menu Start -->
                        <div class="col-auto col-xl d-flex justify-content-end order-2 order-xl-1">
                            <div class="menu-column-area d-none d-xl-block position-static">
                                <nav class="site-main-menu">
                                    <ul>
                                                                                <li>
                                            <a href="/"><span class="menu-text">首页</span></a>
                                        </li>
                                                                                <li>
                                            <a href="/free-nodes/"><span class="menu-text">免费节点</span></a>
                                        </li>
                                                                                <li>
                                            <a href="/paid-subscribe/"><span class="menu-text">推荐机场</span></a>
                                        </li>
                                                                                <li>
                                            <a href="/client.htm"><span class="menu-text">客户端</span></a>
                                        </li>
                                                                                <li>
                                            <a href="/news/"><span class="menu-text">新闻资讯</span></a>
                                        </li>
                                                                            </ul>
                                </nav>
                            </div>

                            <!-- Header Mobile Menu Toggle Start -->
                            <div class="header-mobile-menu-toggle d-xl-none ml-sm-2">
                                <button class="toggle">
                                    <i class="icon-top"></i>
                                    <i class="icon-middle"></i>
                                    <i class="icon-bottom"></i>
                                </button>
                            </div>
                            <!-- Header Mobile Menu Toggle End -->
                        </div>
                        <!-- Header Main Menu End -->

                    </div>
                </div>
            </div>
        </div>
        <!-- Header Section End -->
        <!-- Page Title Section Start -->
        <div class="page-title-section section section-padding-top" data-overlay="0.7" data-bg-image="/assets/website/img/latestclashnode/bg/breadcrumb-bg.jpg">
            <div class="page-title">
                <div class="container">
                    <h1 class="title">vue使用Vuex状态管理模式_vue.js_</h1>
                </div>
            </div>
            <div class="page-breadcrumb position-static">
                <div class="container">
                    <ul class="breadcrumb justify-content-center">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li class="current">正文</li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- Page Title Section End -->
        <!-- Skill With Video Section Start -->
        <div class="section section-padding" data-bg-color="#f8faff">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1、基于单向数据流问题而产生了Vuex</a></li> <li><a href="#_label1" rel="nofollow">2、安装及使用</a></li> <li><a href="#_label2" rel="nofollow">3、核心及使用方法</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_2_0" rel="nofollow">（1）State</a></li> <li><a href="#_lab2_2_1" rel="nofollow">（2） Getters</a></li> <li><a href="#_lab2_2_2" rel="nofollow">（3） Mutation</a></li> <li><a href="#_lab2_2_3" rel="nofollow">（4） Action</a></li> <li><a href="#_lab2_2_4" rel="nofollow">（5）Modules</a></li> </ul> <li><a href="#_label3" rel="nofollow">4、Vuex和全局对象的不同</a></li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1、基于单向数据流问题而产生了Vuex</h2> <p>单向数据流是vue 中父子组件的核心概念，props 是单向绑定的。当父组件的属性值发生变化的时候，会传递给子组件发生相应的变化，从而形成一个单向下行的绑定，父组件的属性改变会流向下行子组件中，但是反之，为了防止子组件无意间修改了父组件中的数据而影响到了其他的子组件的状态，vue 规定了从下往上的数据流是不允许的。当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p> <p>a、多个组件依赖于同一状态。组件之间传参变得特别繁琐，并且兄弟组件之间状态传递无能为力。</p> <p>b、来自不同视图的行为需要变更同一状态。 经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。</p> <p>我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p> <p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。应该根据你的应用开发需要进行权衡和确定。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2、安装及使用</h2> <div class="ay1code"> <pre class="brush:plain;">CDN 方式： &lt;script src="...vuex.js"&gt;&lt;/script&gt;      NPM 方式： npm install vuex --save      Yarn方式： yarn add vuex      其他方式：项目初始化是引入依赖      无论哪种方式都需要  Vue.use(Vuex)来安装 Vuex</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3、核心及使用方法</h2> <p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 vuex的Vuex 核心 State 、Getters 、Mutation、Action、Module。</p> <p class="maodian"><a name="_lab2_2_0" rel="nofollow"></a></p> <h3>（1）State</h3> <p>Vuex也使用了单一状态树来管理应用层级的全部状态。唯一数据源。</p> <p>单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p> <p>state存储状态类似于组件中data，在组件中访问状态经常有两种方法：分别为</p> <p>a、通过 this.$store.state.属性 的方式来访问状态，通常写在computed计算属性中，当然也可以直接通过插值表达式访问；</p> <p>b、借助mapState 辅助函数。</p> <p>核心代码如下：</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;              {{ mycount }}&lt;br&gt;              直接插值表达式访问              {{ this.$store.state.count }}&lt;br&gt;              {{ myinfoAge }}&lt;br&gt;          &lt;/div&gt;          &lt;script&gt;          import Vue from 'vue';          import Vuex from 'vuex';          import { mapState } from 'vuex'// 使用辅助函数一定记住引入          const store = new Vuex.Store({              // 存储状态数据              state: {                  count: 0,                  info:{                      name:"xiaoming",                      age:18                  }              },          )          new Vue({               el: '#app',              store,              computed:{                  // a、计算属性方式                  mycount(){                      return this.$store.state.count                  },                  // b、利用辅助函数赋值给对应变量，页面可以直接使用该变量                   ...mapState({                      myinfoAge: (state) =&gt; state.info.age,                  }),                  // 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。下面的简化写法相当于 info: (state) =&gt; state.info,                  ...mapState(["info"]),              }          })          &lt;/script&gt;</pre> </div> <p class="maodian"><a name="_lab2_2_1" rel="nofollow"></a></p> <h3>（2） Getters</h3> <p>store的一个计算属性，类比组件的计算属性,getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算,Getter 接受 state 作为其第一个参数,在state中的数据发生改变，计算属性重新计算</p> <p>Getters 的状态存储相当于组件中计算属性，访问方式有三种：</p> <p>a、通过属性访问</p> <p>b、通过方法访问</p> <p>c、通过mapGetters 辅助函数访问</p> <p>核心代码如下：</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;             {{ myInfoLength }}&lt;br&gt;             直接插值表达式访问             {{ this.$store.getters.infoLength }}&lt;br&gt;             {{ myName }}&lt;br&gt;             {{ infoLength }}          &lt;/div&gt;          &lt;script&gt;          import Vue from 'vue';          import Vuex from 'vuex';          import { mapGetters  } from 'vuex'// 使用辅助函数一定记住引入          const store = new Vuex.Store({              state: {                  info:[                      {name:"name1",age:18},                      {name:"name2",age:28}                  ]              },              // 存储状态数据              getters: {                  infoLength: (state) =&gt; {                      return state.info.length;                  },                  getNameByAge: (state) =&gt; (age) =&gt; {                      return state.info.find(item =&gt; item.age === age).name                  }              },          )          new Vue({               el: '#app',              store,              computed:{                  // a、通过属性访问                  myInfoLength(){                      return this.$store.getters.infoLength                  }                  // b、通过方法访问                  myName(){                      return this.$store.getters.getNameByAge(18)                  }                  // c、mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性                  ...mapGetters(["infoLength"])              }          })          &lt;/script&gt;</pre> </div> <p class="maodian"><a name="_lab2_2_2" rel="nofollow"></a></p> <h3>（3） Mutation</h3> <p>前面state和getters两个核心概念都是为了在store存储数据和访问数据的使用，Mutation则提供了对store中数据的修改功能，并且是唯一的更新方式，提交Mutation，Mutation主要包括两部分：字符串的事件类型（type）和一个回调函数（handler）,该回调函数的第一个参数就是state。</p> <p>在视图组件中不能直接修改store容器中的状态，需要先在容器中注册一个事件函数，当需要更新状态时候需要提交触发该事件，同时可以向该事件传递参数。这里需要区别与组件内v-model双向绑定。提交事件方法有一下几种：</p> <p>a、普通提交方式</p> <p>b、对象风格提交</p> <p>c、借助 mapMutations 辅助函数</p> <p>其核心代码如下：</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;              &lt;button @click="handleAdd"&gt;点我加一&lt;/button&gt;              &lt;button @click="handleAddForNum"&gt;点我加加&lt;/button&gt;              &lt;button @click="handleAddForObj"&gt;对象添加&lt;/button&gt;              &lt;button @click="handleAddMap"&gt;对象添加&lt;/button&gt;          &lt;/div&gt;          &lt;script&gt;          import Vue from 'vue';          import Vuex from 'vuex';          import { mapMutations  } from 'vuex'// 使用辅助函数一定记住引入          const store = new Vuex.Store({              state: {                  count:1              },              mutations：{                  // 注册事件                  addCount(state){                      state.count ++                  },                  addCountForNum(state,num){                      state.count += num                  },                  addCountForObj(state,payload){                      state.count += payload.num                  },                  addMap(state){                      state.count ++                  }              }          )          new Vue({               el: '#app',              store,              methods:{                  // a、普通提交方式                  handleAdd(){                      this.$store.commit('addCount')                  },                  handleAddForNum(){                      this.$store.commit('addCountForNum',10)                  },                  // b、对象风格提交                  handleAddForObj() {                      this.$store.commit({ type: "addCountForObj", num: 100 });                  },                  // c、借助 mapMutations 辅助函数                  ...mapMutations(["addMap"]),                  handleAddMap(){                      this.addMap()                  }              }          })          &lt;/script&gt;</pre> </div> <p>Mutation 需遵守 Vue 的响应规则，Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：最好提前在你的 store 中初始化好所有所需属性。当需要在对象上添加新属性时，你应该使用 Vue.set(obj, 'newProp', 123), 或者以新对象替换老对象。例如，利用对象展开运算符 state.obj = { ...state.obj, newProp: 123 }</p> <p>注意：Mutation 必须是同步函数。在 mutation 中混合异步调用会导致你的程序很难调试。例如，当你调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？</p> <p class="maodian"><a name="_lab2_2_3" rel="nofollow"></a></p> <h3>（4） Action</h3> <p> Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.action 用于异步的修改state，它是通过muation间接修改state的。</p> <p> context是和store对象具有相同方法和属性的对象.也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等.</p> <p> 若需要异步操作来修改state中的状态，首先需要action来注册事件，组件视图在通过dispatch分发方式调用该事件，该事件内部提交mutation中的事件完成改变状态操作，总之，通过action这个中介来提交mutation中的事件函数.分发事件方法如下：</p> <p>a、普通提交方式</p> <p> b、对象风格提交</p> <p> c、借助 mapActions 辅助函数</p> <p> 核心代码如下：</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;              &lt;button @click="handleAdd"&gt;点我加一&lt;/button&gt;              &lt;button @click="handleAddTen"&gt;点我加十&lt;/button&gt;              &lt;button @click="handleAddForObj"&gt;对象添加&lt;/button&gt;              &lt;button @click="handleAddMap"&gt;对象添加&lt;/button&gt;          &lt;/div&gt;          &lt;script&gt;          import Vue from 'vue';          import Vuex from 'vuex';          import { mapMutations,mapActions  } from 'vuex'// 使用辅助函数一定记住引入          const store = new Vuex.Store({              state: {                  count:1              },              // 注册事件修改state状态值              mutations：{                  addCount(state){                      state.count ++                  },                  addCountForNum(state,num){                      state.count += num                  },                  addCountForObj(state,payload){                      state.count += payload.num                  },                  addMap(state){                      state.count ++                  }              },              // 注册事件,提交给 mutation              actions：{                  addAction(context){                      setTimeout(() =&gt; {                          context.commit('addCount')                      }, 1000)                  },                  addActionForNum(context,num){                      setTimeout(() =&gt; {                          context.commit('addCountForNum',num)                      }, 1000)                  },                  addActionForObj(context,payload){                      setTimeout(() =&gt; {                          context.commit('addCountForObj',payload)                      }, 1000)                  },                  addActionMap(context){                      setTimeout(() =&gt; {                          context.commit('addMap')                      }, 1000)                  }              }          )          new Vue({               el: '#app',              store,              methods:{                  // a、普通提交方式                  handleAdd(){                      this.$store.dispatch('addAction')                  },                  handleAddTen(){                      this.$store.dispatch('addActionForNum',10)                  },                  //  b、对象风格提交                  handleAddForObj(){                      this.$store.dispatch({                          type: 'addActionForObj',                          amount: 10                      })                  }                  // 借助 mapActions 辅助函数                  ...mapActions(["addActionMap"]),// 相当于...mapActions({addActionMap："addActionMap"})                   handleAddMap(){                      this.addActionMap()                  }              }          })</pre> </div> <p>组合 Action:组合多个 action，以处理更加复杂的异步流程.store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise。一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。假设 getData() 和 getOtherData() 返回的是 Promise。</p> <div class="ay1code"> <pre class="brush:xhtml;">actions: {              async actionA ({ commit }) {                  commit('gotData', await getData())              },              async actionB ({ dispatch, commit }) {                  await dispatch('actionA') // 等待 actionA 完成                  commit('gotOtherData', await getOtherData())              }          }</pre> </div> <p class="maodian"><a name="_lab2_2_4" rel="nofollow"></a></p> <h3>（5）Modules</h3> <p>Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutation、action、getters等</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4、Vuex和全局对象的不同</h2> <p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p> <p>（2）你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-52709.htm">三国杀有限定技的武将有谁（三国杀里的限定技能用几次）</a></p>
                                        <p>下一个：<a href="/news/article-53242.htm">动物疫苗生产厂家排名榜单图片高清（动物疫苗上市公司排名）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-21200.htm" title="猫咪驱虫应该用什么药（猫咪驱虫什么药最好）">猫咪驱虫应该用什么药（猫咪驱虫什么药最好）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-free-clash-subscribe.htm" title="「12月11日」最高速度18.4M/S，2024年V2ray/SSR/Clash/Shadowrocket免费节点订阅链接，高速机场推荐">「12月11日」最高速度18.4M/S，2024年V2ray/SSR/Clash/Shadowrocket免费节点订阅链接，高速机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-51644.htm" title="宠爱国际招聘（宠爱国际医疗中心）">宠爱国际招聘（宠爱国际医疗中心）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-9-clash-node-daily-updates.htm" title="「1月9日」最高速度19.9M/S，2025年Shadowrocket/V2ray/SSR/Clash免费节点订阅链接，高速机场推荐">「1月9日」最高速度19.9M/S，2025年Shadowrocket/V2ray/SSR/Clash免费节点订阅链接，高速机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-clash-node-daily-updates.htm" title="「11月14日」最高速度22.5M/S，2024年SSR/Clash/V2ray/Shadowrocket免费节点订阅链接，高速机场推荐">「11月14日」最高速度22.5M/S，2024年SSR/Clash/V2ray/Shadowrocket免费节点订阅链接，高速机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-6-free-v2ray-subscribe.htm" title="「12月6日」最高速度22.9M/S，2024年SSR/Clash/Shadowrocket/V2ray免费节点订阅链接，高速机场推荐">「12月6日」最高速度22.9M/S，2024年SSR/Clash/Shadowrocket/V2ray免费节点订阅链接，高速机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-32860.htm" title="开宠物店去哪里学技术（开宠物店需要去哪里学）">开宠物店去哪里学技术（开宠物店需要去哪里学）</a></li>
                        <li class="py-2"><a href="/news/article-20284.htm" title="拼多多无货源怎么上货到店铺（拼多多无货源怎么卖货）">拼多多无货源怎么上货到店铺（拼多多无货源怎么卖货）</a></li>
                        <li class="py-2"><a href="/news/article-34294.htm" title="延吉安泰动物医院怎么样呀多少钱（延吉安泰动物医院电话）">延吉安泰动物医院怎么样呀多少钱（延吉安泰动物医院电话）</a></li>
                        <li class="py-2"><a href="/news/article-23032.htm" title="宠物领养软件下载安装 宠物领养软件下载安装免费">宠物领养软件下载安装 宠物领养软件下载安装免费</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- Skill With Video Section End -->
        <div class="footer-section section" data-bg-color="#030e22">
            <div class="container">
                <!-- Footer Copyright Start -->
                <div class="row">
                    <div class="col">
                        <p class="copyright">
                            LatestClashNode最新订阅分享站 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!-- Footer Copyright End -->
            </div>
        </div>
        <!-- Scroll Top Start -->
        <a href="#" class="scroll-top" id="scroll-top">
            <i class="arrow-top fal fa-long-arrow-up"></i>
            <i class="arrow-bottom fal fa-long-arrow-up"></i>
        </a>
        <!-- Scroll Top End -->
    </div>
        <div id="site-main-mobile-menu" class="site-main-mobile-menu">
        <div class="site-main-mobile-menu-inner">
            <div class="mobile-menu-header">
                <div class="mobile-menu-logo">
                    <a href="/"><img src="/assets/website/img/latestclashnode/logo/light-logo.png" alt=""></a>
                </div>
                <div class="mobile-menu-close">
                    <button class="toggle">
                        <i class="icon-top"></i>
                        <i class="icon-bottom"></i>
                    </button>
                </div>
            </div>
            <div class="mobile-menu-content">
                <nav class="site-mobile-menu">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                </nav>
            </div>
        </div>
    </div>
    <!-- JS
============================================ -->
    <!-- Vendors JS -->
    <script src="/assets/website/js/frontend/latestclashnode/vendor/modernizr-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/vendor/jquery-3.4.1.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/vendor/jquery-migrate-3.1.0.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/vendor/bootstrap.bundle.min.js"></script>
    <!-- Plugins JS -->
    <script src="/assets/website/js/frontend/latestclashnode/plugins/aos.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/parallax.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/jquery.ajaxchimp.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/jquery.counterup.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/svg-inject.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/swiper.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/vanilla-tilt.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/vivus.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/plugins/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/latestclashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>